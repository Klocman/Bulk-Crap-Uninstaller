<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="checkBoxCertTest.Text" xml:space="preserve">
    <value>Destacar os desinstaladores certificados</value>
  </data>
  <data name="checkBoxListSysComp.Text" xml:space="preserve">
    <value>Mostrar os componentes do sistema</value>
  </data>
  <data name="checkBoxOrphans.ToolTip" xml:space="preserve">
    <value>Exibir aplicativos que não possuem nenhum desinstalador registrado. Eles não são visíveis na maioria dos gerenciadores de desinstalação, mas ainda ocupam espaço. Os itens não registrados estão marcados com uma cor vermelha.

Aviso: Verifique antes de remover esses aplicativos, eles ainda podem ser necessários!</value>
  </data>
  <data name="checkBoxViewCheckboxes.Text" xml:space="preserve">
    <value>Selecione usando caixas de seleção</value>
  </data>
  <data name="checkBoxCertTest.ToolTip" xml:space="preserve">
    <value>Use cores para identificar desinstaladores certificados.
Se o certificado foi verificado com sucesso use cor verde, caso contrário use cor azul.

Aviso: a verificação pode demorar muito para ser concluída.</value>
  </data>
  <data name="checkBoxShowUpdates.Text" xml:space="preserve">
    <value>Exibir atualizações</value>
  </data>
  <data name="checkBoxListProtected.Text" xml:space="preserve">
    <value>Exibir itens protegidos</value>
  </data>
  <data name="checkBoxViewCheckboxes.ToolTip" xml:space="preserve">
    <value>Muda o estilo de seleção da lista para caixas de seleção. Eles são mais seguros porque um único clique não pode desmarcar tudo.

Você pode verificar vários itens, destacando-os e pressionando a barra de espaço.</value>
  </data>
  <data name="checkBoxShowUpdates.ToolTip" xml:space="preserve">
    <value>Atualizações de outros aplicativos. Normalmente, eles são desinstalados junto com seu aplicativo pai, para que possam ser ignorados.</value>
  </data>
  <data name="checkBoxOrphans.Text" xml:space="preserve">
    <value>Exibir aplicativos não registrados</value>
  </data>
  <data name="checkBoxShowStoreApps.Text" xml:space="preserve">
    <value>Exibir Apps da Windows Store</value>
  </data>
  <data name="checkBoxListHideMicrosoft.ToolTip" xml:space="preserve">
    <value>Filtre tudo o que foi publicado pela Microsoft. É simples assim.</value>
  </data>
  <data name="checkBoxInvalidTest.ToolTip" xml:space="preserve">
    <value>Use cor cinza para identificar desinstaladores corrompidos ou ausente</value>
  </data>
  <data name="checkBoxViewGroups.Text" xml:space="preserve">
    <value>Exibir itens em grupos</value>
  </data>
  <data name="checkBoxWinFeature.Text" xml:space="preserve">
    <value>Exibir os recursos do Windows</value>
  </data>
  <data name="checkBoxListSysComp.ToolTip" xml:space="preserve">
    <value>Alguns desinstaladores podem ser marcados como "componentes do sistema" para ocultá-los da lista Adicionar/Remover.
Os drivers são frequentemente marcados com esta etiqueta.</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Configurações de exibição de lista</value>
  </data>
  <data name="checkBoxListHideMicrosoft.Text" xml:space="preserve">
    <value>Ocultar os publicados pela Microsoft</value>
  </data>
  <data name="checkBoxInvalidTest.Text" xml:space="preserve">
    <value>Destacar os desinstaladores inválidos</value>
  </data>
  <data name="checkBoxViewGroups.ToolTip" xml:space="preserve">
    <value>Agrupar itens de acordo com a coluna pela qual a lista foi classificada.
O agrupamento da maioria das colunas usa filtragem inteligente.</value>
  </data>
  <data name="groupBox2.Text" xml:space="preserve">
    <value>Filtragem</value>
  </data>
  <data name="checkBoxListProtected.ToolTip" xml:space="preserve">
    <value>Os itens protegidos são marcados com a tag "NoRemove", o que significa que o editor não deseja que você os remova.</value>
  </data>
  <data name="checkBoxTweaks.Text" xml:space="preserve">
    <value>Mostrar modificações</value>
  </data>
  <data name="checkBoxHighlightSpecial.Text" xml:space="preserve">
    <value>Destacar desinstaladores especiais</value>
  </data>
  <data name="checkBoxHighlightSpecial.ToolTip" xml:space="preserve">
    <value>Usa cores para diferenciar aplicações especiais, como por exemplo Window Store e Recursos do Windows</value>
  </data>
</root>