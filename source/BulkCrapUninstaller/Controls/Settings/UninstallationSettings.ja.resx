<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="checkBoxManualNoCollisionProtection.Text" xml:space="preserve">
    <value>手動でアンインストーラーを実行する際の衝突防止を無効化</value>
  </data>
  <data name="checkBoxConcurrentOneLoud.Text" xml:space="preserve">
    <value>騒音アンインストーラーは1度に1つだけ</value>
  </data>
  <data name="checkBoxConcurrent.Text" xml:space="preserve">
    <value>可能であればアンインストーラーを自動的に並行実行</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>同時に実行できるアンインストーラーの最大数：</value>
  </data>
  <data name="groupBox3.Text" xml:space="preserve">
    <value>並行アンインストール</value>
  </data>
  <data name="checkBoxShutdown.Text" xml:space="preserve">
    <value>システムのシャットダウン/再起動を防止</value>
  </data>
  <data name="checkBoxRestorePoint.Text" xml:space="preserve">
    <value>アンインストール前に復元ポイントを作成</value>
  </data>
  <data name="checkBoxRestorePoint.ToolTip" xml:space="preserve">
    <value>レジストリ、一部の設定やファイルをバックアップするためにシステム復元ポイントを作成できます。ドライバや重要なシステムアプリケーションを削除する前に、復元ポイントを作成することを推奨します。</value>
  </data>
  <data name="checkBoxBatchSortQuiet.Text" xml:space="preserve">
    <value>アンインストーラーを賢く並べ替え</value>
  </data>
  <data name="checkBoxDiisableProtection.Text" xml:space="preserve">
    <value>保護を無効化</value>
  </data>
  <data name="checkBoxSimulate.Text" xml:space="preserve">
    <value>アンインストールをシミュレーション</value>
  </data>
  <data name="groupBox2.Text" xml:space="preserve">
    <value>一般設定</value>
  </data>
  <data name="checkBoxAutoKillQuiet.Text" xml:space="preserve">
    <value>フリーズした無音アンインストーラーを自動的に強制終了</value>
  </data>
  <data name="checkBoxRetryQuiet.Text" xml:space="preserve">
    <value>失敗した無音アンインストーラーを1度再試行</value>
  </data>
  <data name="checkBoxGenerate.Text" xml:space="preserve">
    <value>可能であれば不足している無音アンインストーラーを生成</value>
  </data>
  <data name="checkBoxGenerateStuck.Text" xml:space="preserve">
    <value>ユーザー入力待機でフリーズした場合、自動的に強制終了</value>
  </data>
  <data name="checkBoxAutoDaemon.Text" xml:space="preserve">
    <value>ポップアップやその他の停止状態を監視し、それらを自動化する（自動化デーモンを実行）</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>無音アンインストール</value>
  </data>
</root>
