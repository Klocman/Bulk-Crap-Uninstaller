<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="detailsToolStripMenuItem.Text" xml:space="preserve">
    <value>&amp;Dettagli</value>
  </data>
  <data name="copyToClipboardToolStripMenuItem.Text" xml:space="preserve">
    <value>&amp;Copia nella Appunti</value>
  </data>
  <data name="openToolStripMenuItem.Text" xml:space="preserve">
    <value>&amp;Apri</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Rimozione oggetti residui</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Elenco di file e/o chiavi di registro ignorati durante la disinstallazione</value>
  </data>
  <data name="headerConfInfo.Text" xml:space="preserve">
    <value>Il rilevamento degli elementi residui è un processo elaborato che può produrre errori. Per questo motivo a tutti gli oggetti è assegnato un livello di affidabilità e la decisione finale è lasciata all'utente. Gli elementi con un livello di affidabilità alto e molto alto sono normalmente sicuri da rimuovere, ma sarebbe opportuno controllare ancora.</value>
  </data>
  <data name="headerConfTitle.Text" xml:space="preserve">
    <value>Livello affidabilità</value>
  </data>
  <data name="headerIntro.Text" xml:space="preserve">
    <value>I seguenti elementi sembrano essere stati ignorati dai loro disinstallatori. Alcuni disinstallatori potrebbero aver fallito nella rimozione di parte dell'applicazione, sprecando spazio su disco. In ogni caso buona parte di questi elementi sono spesso le impostazioni dell'applicazione, che occupano poco spazio e non danno problemi.</value>
  </data>
  <data name="olvColumnUninstallerName.Text" xml:space="preserve">
    <value>Nome disinstallatore</value>
  </data>
  <data name="olvColumnSafety.Text" xml:space="preserve">
    <value>Affidabilità</value>
  </data>
  <data name="olvColumnPath.Text" xml:space="preserve">
    <value>Percorso elemento</value>
  </data>
  <data name="checkBoxHideLowConfidence.Text" xml:space="preserve">
    <value>Nascondi elementi con pessima affidabilità</value>
  </data>
  <data name="buttonExport.Text" xml:space="preserve">
    <value>Esporta...</value>
  </data>
  <data name="buttonAccept.Text" xml:space="preserve">
    <value>Rimuovi selezionati</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Annulla</value>
  </data>
  <data name="exportDialog.Title" xml:space="preserve">
    <value>Esporta elenco oggetti residui</value>
    <comment>leftover=rimanenti</comment>
  </data>
  <data name="exportDialog.Filter" xml:space="preserve">
    <value>File testo|*.txt</value>
    <comment>keep the |*.txt</comment>
  </data>
</root>