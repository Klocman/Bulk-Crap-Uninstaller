<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label5.Text" xml:space="preserve">
    <value>Командная строка до деинсталляции</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>Командная строка после деинсталляции</value>
  </data>
  <data name="checkBoxAutoLoad.Text" xml:space="preserve">
    <value>Автозагрузка списка деинсталляции "Default.bcul" при запуске</value>
  </data>
  <data name="checkBoxUpdateSearch.Text" xml:space="preserve">
    <value>Поиск обновлений при запуске</value>
  </data>
  <data name="checkBoxSendStats.Text" xml:space="preserve">
    <value>Отправлять анонимную статистику</value>
  </data>
  <data name="checkBoxRatings.Text" xml:space="preserve">
    <value>Включить пользовательский рейтинг приложений</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>Язык приложения:</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>Приложение надо перезапустить, чтобы изменения языка вступили в силу.</value>
  </data>
  <data name="groupBoxMisc.Text" xml:space="preserve">
    <value>Разное</value>
  </data>
  <data name="checkBoxLoud.Text" xml:space="preserve">
    <value>Запрос отключения громких деинсталляторов из тихих задач</value>
  </data>
  <data name="checkBoxBackup.Text" xml:space="preserve">
    <value>Запрос создания бэкапа реестра перед удалением хвостов</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Искать мусор после деинсталляции</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Создать точку восстановления перед удалением</value>
  </data>
  <data name="groupBoxMessages.Text" xml:space="preserve">
    <value>Окна сообщений</value>
  </data>
  <data name="checkBoxEnableExternal.Text" xml:space="preserve">
    <value>Включить выполнение внешних приложений</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>Можно указать команды, которые будут выполняться до и после удаления. Одна линия равна одной команде и будет выполняться, как через диалог «Выполнить...». 

BCU будет ждать завершения одной команды для начала выполнения следующей.</value>
  </data>
  <data name="groupBoxExternal.Text" xml:space="preserve">
    <value>Внешние приложения</value>
  </data>
  <data name="button2.Text" xml:space="preserve">
    <value>&amp;Закрыть</value>
  </data>
  <data name="tabPageGeneral.Text" xml:space="preserve">
    <value>Общие</value>
  </data>
  <data name="tabPage1.Text" xml:space="preserve">
    <value>Деинсталляция</value>
  </data>
  <data name="tabPageExternal.Text" xml:space="preserve">
    <value>Внешние инструменты</value>
  </data>
  <data name="labelProgramFolders.Text" xml:space="preserve">
    <value>Можно задать пользовательские папки установки приложений (например, D:\Applications). Эти папки будут использоваться BCU для поиска и удаления остатков незарегистрированных приложений и некоторых других вещей. Хотя это не обязательно, со списком таких папок BCU будет работать лучше.

По умолчанию, папки Windows всегда проверяются, вам не нужно включать их в этот список.

Используйте полный путь каталога, один путь на строку. Недопустимые пути и несуществующие каталоги будут игнорироваться.</value>
  </data>
  <data name="groupBoxProgramFolders.Text" xml:space="preserve">
    <value>Папки установки программ</value>
  </data>
  <data name="tabPageFolders.Text" xml:space="preserve">
    <value>Папки</value>
  </data>
  <data name="tabPageMisc.Text" xml:space="preserve">
    <value>Прочее</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Настройки Bulk Crap Uninstaller</value>
  </data>
  <data name="checkBoxShowAllBadJunk.Text" xml:space="preserve">
    <value>Всегда показывать мусорные, с низким доверием</value>
  </data>
  <data name="checkBoxNeverFeedback.Text" xml:space="preserve">
    <value>Никогда не просить отзыв или помощь</value>
  </data>
  <data name="checkBoxScanSteam.Text" xml:space="preserve">
    <value>Steam</value>
  </data>
  <data name="checkBoxScanRegistry.Text" xml:space="preserve">
    <value>Реестр (рекомендуется оставить включенным)</value>
  </data>
  <data name="checkBoxScanDrives.Text" xml:space="preserve">
    <value>Диски (обнаружение незарегистрированных приложений)</value>
  </data>
  <data name="checkBoxPreDefined.Text" xml:space="preserve">
    <value>Основываясь на предопределенных правилах</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Поиск приложений в...</value>
  </data>
  <data name="groupBoxAppStores.Text" xml:space="preserve">
    <value>Места с приложениями для сканирования</value>
  </data>
  <data name="tabPageDetection.Text" xml:space="preserve">
    <value>Обнаружение</value>
  </data>
  <data name="checkBoxScanStoreApps.Text" xml:space="preserve">
    <value>Приложения Windows Store</value>
  </data>
  <data name="checkBoxScanWinFeatures.Text" xml:space="preserve">
    <value>Функции Windows</value>
  </data>
  <data name="labelWinFeatureInfo.Text" xml:space="preserve">
    <value>Обнаружение функций Windows использует WMI и может быть медленным или даже неработоспособным в некоторых системах (обычно это указывает на повреждение системы).</value>
  </data>
  <data name="checkBoxScanWinUpdates.Text" xml:space="preserve">
    <value>Обновления Windows</value>
  </data>
  <data name="labelWinUpdateInfo.Text" xml:space="preserve">
    <value>Обнаружение обновлений Windows использует WUA, что происходит медленно. Это может занять пару минут.</value>
  </data>
  <data name="checkBoxAutoInstallFolderDetect.Text" xml:space="preserve">
    <value>Попытатся автоопределить пользовательские папки с приложениями</value>
  </data>
  <metadata name="usageTracker1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>